#config_version=5
#Cuphead Base Mode Config

mode:
  start_events: ball_starting
  priority: 100 # lowest pririty so other modes can take over
#  stop_events: ball_will_end

counters:
  bonus:
    count_events: drop_target_bank_cup_bank_down, drop_target_bank_mug_bank_down # each bank gets its own counter
    events_when_hit: bank_done # when each back is done the event "bank_done" is posted
    starting_count: 0
    count_complete_value: 10 # set to 10 becasue there are 10 bonus lights
    direction: up
    persist_state: false # does not keep its value from ball to ball
    disable_on_complete: true # once all ten bonus lights are lit, stop the counter
  spinner_rotations:
    count_events: s_spinner_active
    count_complete_value: 7
    starting_count: 0
    direction: up
    persist_state: true
    events_when_hit: advance_lane
    reset_on_complete: true
    disable_on_complete: false

timers:
  spinner_timer:
    direction: down
    start_value: 5
    end_value: 0
    tick_interval: 500ms
    debug: true
    control_events:
      - action: restart
        event: s_spinner_active
  perditionPost_timer:
    direction: down
    start_value: 2
    end_value: 0
    tick_interval: 500ms
    debug: true
    control_events:
      - action: start
        event: startMBPost

show_player:
  mode_base_started: base_lighting
  advance_lane{count==1}:
    1_on: play
    7_on: stop
  advance_lane{count==2}:
    2_on: play
    1_on: stop
  advance_lane{count==3}:
    3_on: play
    2_on: stop
  advance_lane{count==4}:
    4_on: play
    3_on: stop
  advance_lane{count==5}:
    5_on: play
    4_on: stop
  advance_lane{count==6}:
    6_on: play
    5_on: stop
  advance_lane{count==7}:
    7_on: play
    6_on: stop
  bank_done{count==1}: 1000_on # if bank_done is posted and the count value is 1 then run the show 1000_on
  bank_done{count==2}: 2000_on
  bank_done{count==3}: 3000_on
  bank_done{count==4}: 4000_on
  bank_done{count==5}: 5000_on
  bank_done{count==6}: 6000_on
  bank_done{count==7}: 7000_on
  bank_done{count==8}: 8000_on
  bank_done{count==9}: 9000_on
  bank_done{count==10}: 10000_on

shots:
  knock_out:
    switch: s_standUp_R

coil_player:  # this coil player controls the post that blocks entrance to the perdition lane
  s_trough1_active: c_perdition_post_down # drop on any ball end or if...
  startMBPost: c_perdition_post_down  # the perdition multiball is started
  timer_perditionPost_timer_complete: c_perdition_post_up  # put the post back up after the ball has exited
  mbReady: c_perdition_post_up # put the post up if the multiball is ready to keep the active ball out of the perdition lane


variable_player:
  bonus:
    int: 1
    action: set
  s_popBumper_1_active:
    score: 100
  s_popBumper_2_active:
    score: 100
  s_popBumper_3_active:
    score: 100
  s_dt_C_active:
    score: 100
  s_dt_U_active:
    score: 100
  s_dt_P_active:
    score: 100
  s_dt_M_active:
    score: 100
  s_dt_U2_active:
    score: 100
  s_dt_G_active:
    score: 100
  drop_target_bank_cup_bank_down: # if the bank is dropped...
    contracts: 1 # increment the counter contracts by one
  drop_target_bank_mug_bank_down:
    contracts: 1
  mode_base_started: # when the mode starts...
    contracts:
      int: 0 # put 0...
      action: set # into contracts
  s_midRight_active:
    score: 50
  s_perdition_active:
    score: 100
  s_dtSling_L_active:
    score: 10
  s_dtSling_R_active:
    score: 10
  s_sling_L_active:
    score: 10
  s_sling_R_active:
    score: 10
  knock_out_hit:
    score: 500
  s_spinner_active: # if the spinner switch is active...
    spinner_rotations: 1 # add one to the player variable spinner_rotations and..
    score: 1 # score 10 points per spinner spin
  advance_lane{count<7}: # if the advance_lane counter is less than 7..
    dice_pips: 1 #advance the player variable dice_pips by one so that it is not "7"
  advance_lane{count==7}: # if the advance_lane counter is 7 then set the..
    dice_pips: # player variable dice_pips to...
      int: 7 # equal 7
      action: set
  timer_spinner_timer_complete{current_player.dice_pips==7}: #if the dice light is on when the spinner stops
    score: 1 #then payout
  s_star_1_active:
    score: 50
  s_star_2_active:
    score: 50
  s_star_3_active:
    score: 50
  s_inLane_L_active:
    score: 50
  s_inLane_R_active:
    score: 50
  s_outLane_L_active:
    score: 100
  s_outLane_R_active:
    score: 100
  s_kicker_active:
    score: 1000  #+(1000*perdition_value)


sound_player:
  mode_base_started: # when the mode starts...
    poolCupHeadBase: # select a song from the pool..
      loops: -1 # and loop it indefinitely
  ball_drain{game.balls_in_play==1} : # when the ball drains...
    poolCupHeadBase:
      action: stop # stop playing the music
  ball_drain: drainHit
  s_inLane_L_active: inLanes
  s_inLane_R_active: inLanes
  s_outLane_L_active: outLanes
  s_outLane_R_active: outLanes
  bank_done{count==1}: soul1
  bank_done{count==2}: soul2
  bank_done{count==3}: soul3
  bank_done{count==4}: soul4
  bank_done{count==5}: soul5
  bank_done{count==6}: soul6
  bank_done{count==7}: soul7
  bank_done{count==8}: soul8
  bank_done{count==9}: soul9
  bank_done{count==10}: soul10
  mode_dashLit_started: dashLitStarted
  timer_spinner_timer_complete{current_player.dice_pips==7}: roll7
  advance_lane: spin
  knock_out_hit: knockOut
  sw_dtSw_active: dropTarget
  s_kicker_active: kicker
  sw_dtSlingSw_active: dtSling
  s_star_1_active: stars
  s_star_2_active: stars
  s_star_3_active: stars

slide_player:
  mode_base_started:
    base_slide:
      target: lower



event_player:
  beppi_play: beppi_slide
  cagney_play: cagney_slide
  calla_play: calla_slide
  capt_play: capt_slide
  hilda_play: hilda_slide
  ribbi_play: ribbi_slide
  robot_play: robot_slide
  root_play: root_slide
  train_play: train_slide
  wally_play: wally_slide
